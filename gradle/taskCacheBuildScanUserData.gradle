/*
 * Copyright 2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.api.internal.file.FileCollectionInternal
import org.gradle.api.internal.file.FileCollectionVisitor
import org.gradle.api.internal.file.FileTreeInternal
import org.gradle.api.internal.file.collections.DirectoryFileTree
import org.gradle.internal.classloader.ClassLoaderVisitor
import org.gradle.internal.classloader.ClassLoaderHierarchyHasher
import org.gradle.internal.operations.notify.BuildOperationNotificationListener
import org.gradle.internal.operations.notify.BuildOperationStartedNotification
import org.gradle.internal.operations.notify.BuildOperationFinishedNotification
import org.gradle.api.internal.tasks.SnapshotTaskInputsBuildOperationType

pluginManager.withPlugin("com.gradle.build-scan") {
    if (gradle.startParameter.buildCacheEnabled) {
        buildScan.tag 'CACHED'

        ext.tasksToInvestigateForCache = project.hasProperty('cache.investigate.tasks') ? project.getProperty('cache.investigate.tasks').split(',') : [
            'compileJava',
            ':jar',
            ':docs:test',
            ':launcher:startScripts',
            ':toolingApi:shadedJarWithoutVersion',
            ':integTest',
            ':test',
            ':compileTestFixtures',
            ':compileTestGroovy',
            ':compileIntegTestGroovy',
            'compileGroovy'
        ]
        ext.tasksToInvestigateForCacheWithPaths = project.hasProperty('cache.investigate.tasks.paths') ? project.getProperty('cache.investigate.tasks.paths').split(',') : [
            ':baseServices:classpathManifest',
            ':core:compileTestGroovy'
        ]
        ext.taskPropertiesWithFullFileSnapshot = [
            ':baseServices:compileJava': ['classpath'],
            ':core:compileTestGroovy': ['classpath'],
        ]

        def cacheConfiguration = gradle.services.get(org.gradle.caching.configuration.internal.BuildCacheConfigurationInternal)
        publishCacheConfiguration('local', cacheConfiguration.local)
        publishCacheConfiguration('remote', cacheConfiguration.remote)

        gradle.services.get(org.gradle.internal.operations.notify.BuildOperationNotificationListenerRegistrar)
            .registerBuildScopeListener(new BuildOperationNotificationListener() {
            void started(BuildOperationStartedNotification notification) {}

            void finished(BuildOperationFinishedNotification notification) {
                def anyDetails = notification.notificationOperationDetails
                if (anyDetails instanceof SnapshotTaskInputsBuildOperationType.Details) {
                    String taskPath = anyDetails.taskPath
                    SnapshotTaskInputsBuildOperationType.Result result = (SnapshotTaskInputsBuildOperationType.Result) notification.notificationOperationResult
                    if (result.buildCacheKey) {
                        buildScan.value "${taskPath}-build-cache-key", String.valueOf(result.buildCacheKey)
                        buildScan.value "${taskPath}-classloader-hash", String.valueOf(result.classLoaderHash)
                        int actionIndex = 0
                        def implementationHashes = [result.actionClassNames, result.actionClassLoaderHashes].transpose()
                        implementationHashes.each { className, classLoaderHash ->
                            buildScan.value "${taskPath}-action-classname-${actionIndex}", String.valueOf(className)
                            buildScan.value "${taskPath}-action-classloader-hash-${actionIndex++}", String.valueOf(classLoaderHash)
                        }
                        if (tasksToInvestigateForCache.any { taskPath.contains(it) }) {
                            result.inputHashes.each { name, hash ->
                                buildScan.value "${taskPath}-input-${name}", String.valueOf(hash)
                            }
                            if (result.outputPropertyNames) {
                                buildScan.value "${taskPath}-output-property-names", String.valueOf((result.outputPropertyNames as List).join(', '))
                            }
                        }
                    } else {
                        buildScan.value "${taskPath}-build-cache-key", '<No cache key>'
                    }
                }
            }
        })

        project.buildScan.buildFinished(new Action() {
            public void execute(result) {
                for (Task task : (allprojects*.tasks).flatten()) {
                    if (task.state.executed && (tasksToInvestigateForCacheWithPaths.contains(task.getPath())
                        || taskPropertiesWithFullFileSnapshot.keySet().contains(task.getPath()))) {
                        def buildScan = task.project.buildScan
                        def fileProperties = task.inputs.fileProperties
                        fileProperties.each { inputProperty ->
                            def name = inputProperty.propertyName
                            def snapshotter = gradle.services.get(inputProperty.snapshotter)
                            def snapshot = snapshotter.snapshot(inputProperty.getPropertyFiles(), inputProperty.getCompareStrategy(), inputProperty.getSnapshotNormalizationStrategy(), task.project.normalization.buildFinalStrategy())
                            def prefix = "${task.path}-input-${name}"
                            if (tasksToInvestigateForCacheWithPaths.contains(task.path)) {
                                publishPaths(inputProperty.propertyFiles, prefix)
                            }
                            if (name in taskPropertiesWithFullFileSnapshot[task.getPath()]) {
                                publishIndividualFileHashes(snapshot, prefix)
                            }
                        }
                        if (tasksToInvestigateForCacheWithPaths.contains(task.path)) {
                            def hasher = gradle.services.get(ClassLoaderHierarchyHasher)
                            new Visitor(task.project.buildScan, hasher, task).visit(task.getClass().getClassLoader())
                        }
                    }
                }
            }

            private publishIndividualFileHashes(snapshot, prefix) {
                int idx = 0
                snapshot.snapshots.each { path, normalizedSnapshot ->
                    def normalizedPath = normalizedSnapshot.normalizedPath
                    buildScan.value("${prefix}-snapshot-${String.format('%04d', idx)}-filename", new File(path).name)
                    if (normalizedPath) {
                        buildScan.value("${prefix}-snapshot-${String.format('%04d', idx)}-path", normalizedPath)
                    }
                    buildScan.value("${prefix}-snapshot-${String.format('%04d', idx++)}-hash", normalizedSnapshot.snapshot.contentMd5.toString())
                }
            }

            private publishPaths(propertyFiles, String prefix) {
                int idx = 0
                propertyFiles.visitRootElements(new FileCollectionVisitor() {
                    void visitCollection(FileCollectionInternal fileCollection) {
                        buildScan.value "${prefix}-${idx}-fileCollection", fileCollection.toString()
                        buildScan.value "${prefix}-${idx}-fileCollection-path", String.valueOf(fileCollection.files)
                        idx++
                    }

                    void visitTree(FileTreeInternal fileTree) {
                        buildScan.value "${prefix}-${idx}-fileTree", fileTree.toString()
                        idx++
                    }

                    void visitDirectoryTree(DirectoryFileTree directoryTree) {
                        buildScan.value "${prefix}-${idx}-dirTree", directoryTree.toString()
                        idx++
                    }
                })
            }

            private static String hashKey(some) {
                def builder = new org.gradle.caching.internal.DefaultBuildCacheHasher()
                some.appendToHasher(builder)
                builder.hash().toString()
            }
        })
    }
}

def publishCacheConfiguration(String role, cache) {
    if (cache?.enabled) {
        buildScan.tag "PULL-FROM-${role.toUpperCase()}"
        if (cache.push) {
            buildScan.tag "PUSH-TO-${role.toUpperCase()}"
        }
    }
    buildScan.value "build-cache-${role}-class", String.valueOf(cache?.getClass()?.superclass?.simpleName ?: "<no build cache>")
    if (cache != null) {
        buildScan.value "build-cache-${role}-enabled", String.valueOf(cache.enabled)
        buildScan.value "build-cache-${role}-push", String.valueOf(cache.push)
    }
}


class Visitor extends ClassLoaderVisitor {
    final buildScan
    final ClassLoaderHierarchyHasher hasher
    final String prefix
    int counter

    Visitor(buildScan, ClassLoaderHierarchyHasher hasher, Task task) {
        this(buildScan, hasher, "${task.path}-classloader")
    }

    Visitor(buildScan, ClassLoaderHierarchyHasher hasher, String prefix) {
        this.buildScan = buildScan
        this.hasher = hasher
        this.prefix = prefix
    }

    private String classloaderHash(ClassLoader loader) {
        def hash = hasher.getClassLoaderHash(loader)
        if (hash != null) {
            return hash.toString()
        } else {
            null
        }
    }

    @Override
    void visit(ClassLoader classLoader) {
        def hash = classloaderHash(classLoader)
        if (hash) {
            def classloaderName = classLoader.getClass().getSimpleName()
            buildScan.value("${prefix}-${counter++}-${ classloaderName}-hash", hash)
            if ((counter <= 2) && (classLoader instanceof URLClassLoader && (!classloaderName.contains('ExtClassLoader')))) {
                buildScan.value("${prefix}-${counter - 1}-classpath", classLoader.getURLs().join(':'))
            }
        }
        super.visit(classLoader)
    }
}
